<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Li &#39; s Blog</title>
  
  <subtitle>写字的地方</subtitle>
  <link href="https://banatech.org/atom.xml" rel="self"/>
  
  <link href="https://banatech.org/"/>
  <updated>2022-05-14T12:45:29.279Z</updated>
  <id>https://banatech.org/</id>
  
  <author>
    <name>李子灿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Golang从零开发一个Web框架</title>
    <link href="https://banatech.org/20220514/7ad2a5800a6e.html"/>
    <id>https://banatech.org/20220514/7ad2a5800a6e.html</id>
    <published>2022-05-14T06:18:12.000Z</published>
    <updated>2022-05-14T12:45:29.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>很多时候当我们需要实现一个web应用，第一时间想到的就是去使用哪个框架,然而不同的框架有不同的设计理念,提供的功能也有很大的差别  ,比如Java的<code>Spring</code> ,Python的<code>flask</code> 、<code>django</code> ,Go的 <code>Beego</code>、<code>Gin</code> 、<code>Iris</code> 等。那我们为什么不直接使用语言提供的标准库编写呢？要回答这个问题，首先明白框架的核心应该为我们提供什么？ 为什么要用框架？ 只有理解这些才能知道我们在框架中需要实现那些功能。</p><p>下面我们看看使用Go语言标准库<code>net/http</code> 是如何去处理一个http请求的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>,handler)</span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter , req *http.Request)</span></span>&#123;</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;URL:%s&quot;</span>,req.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Go语言的<code>net/http</code> 基础库提供了基础的Web功能，如端口监听，静态路由映射，解析HTTP报文 。如下的一些简单且常用的功能基础库并不支持，这些就需要开发人员自己去实现。</p><ul><li><p>动态路由如<code>/user/:username</code> ,<code>/assets/*filepath</code>的这类规则</p></li><li><p>鉴权:没有统一的分组鉴权功能,需要在每个路由映射的handler 中实现。</p></li><li><p>模板:没有统一简单的HTML模板机制</p></li><li><p>…..</p></li></ul><p>当我们离开了框架,使用基础库在编写web应用时需要频繁的手工处理的地方，这就是框架的价值所在，但是也并不是每一个频繁处理的地方都适合在框架中完成。</p><h1 id="lee框架"><a href="#lee框架" class="headerlink" title="lee框架"></a>lee框架</h1><p>本篇文章将会使用Go语言实现一个简单的Web框架，框架的代码设计参考<a href="https://gin-gonic.com/">Gin框架</a> 。Gin框架的代码一共约<strong>1万4千行</strong>，其中测试代码<strong>9千行</strong>，也就是说实际代码只有<strong>5千行</strong>。<code>Gin</code>的设计也非常的优雅，代码量并不大，非常适合初学者学习。</p><h2 id="实现路由功能"><a href="#实现路由功能" class="headerlink" title="实现路由功能"></a>实现路由功能</h2><p>未完待续……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;很多时候当我们需要实现一个web应用，第一时间想到的就是去使用哪个框架,然而不同的框架有不同的设计理念,提供的功能也有很大的差别  ,比如J</summary>
      
    
    
    
    
    <category term="Go" scheme="https://banatech.org/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://banatech.org/20220508/048a3d05d53b.html"/>
    <id>https://banatech.org/20220508/048a3d05d53b.html</id>
    <published>2022-05-08T14:53:58.073Z</published>
    <updated>2022-05-08T14:53:58.074Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="技术" scheme="https://banatech.org/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Java" scheme="https://banatech.org/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
    <category term="C++" scheme="https://banatech.org/tags/C/"/>
    
    <category term="java" scheme="https://banatech.org/tags/java/"/>
    
  </entry>
  
</feed>
