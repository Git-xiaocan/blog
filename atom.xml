<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Li &#39; s Blog</title>
  
  <subtitle>写字的地方</subtitle>
  <link href="https://banatech.org/atom.xml" rel="self"/>
  
  <link href="https://banatech.org/"/>
  <updated>2022-05-29T12:16:02.902Z</updated>
  <id>https://banatech.org/</id>
  
  <author>
    <name>李子灿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MapReduce:\\ 大型集群上的简化数据处理\(论文翻译\)</title>
    <link href="https://banatech.org/20220529/c3f5f361cc76.html"/>
    <id>https://banatech.org/20220529/c3f5f361cc76.html</id>
    <published>2022-05-29T12:14:07.000Z</published>
    <updated>2022-05-29T12:16:02.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MapReduce-Simplifified-Data-Processing-on-Large-Clusters"><a href="#MapReduce-Simplifified-Data-Processing-on-Large-Clusters" class="headerlink" title="MapReduce: Simplifified Data Processing on Large Clusters"></a>MapReduce: Simplifified Data Processing on Large Clusters</h1><blockquote><p>MapReduce: 大型集群上的简化数据处理</p></blockquote><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><blockquote><p>抽象</p></blockquote><p> MapReduce is a programming model and an associated implementation for processing and generating large data sets. Users specify a map function that processes a key&#x2F;value pair to generate a set of intermediate key&#x2F;value pairs, and a reduce function that merges all intermediate values associated with the same intermediate key. Many real world tasks are expressible in this model, as shown in the paper.</p><blockquote><p>MapReduce是一种编程模式和用于处理和生成大型数据集相关的实现,用户指定一个用于处理一个键值对和以及生成一组中间键值对的map函数,以及一个用于合并与同一中间键关联的所有中间值的reduce 函数。如论文所示，该模型可以表达许多现实世界的任务.</p></blockquote><p> Programs written in this functional style are automatically parallelized and executed on a large cluster of commodity machines. The run-time system takes care of the details of partitioning the input data, scheduling the program’s execution across a set of machines, handling machine failures, and managing the required inter-machine communication. This allows programmers without any experience with parallel and distributed systems to easily utilize the resources of a large distributed system.</p><blockquote><p>通过函数式编程编写的程序会自动并行化的大型商业集群上执行,运行时系统负责对输入的数据进行拆分、在一组机器上调度程序执行，处理机器故障以及管理所需的机器间通信等细节，这使得程序员无需任何并行和分布式经验就可以轻松的利用大型分布式系统的资源。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MapReduce-Simplifified-Data-Processing-on-Large-Clusters&quot;&gt;&lt;a href=&quot;#MapReduce-Simplifified-Data-Processing-on-Large-Clusters&quot; class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用Golang从零实现一个简易Web框架</title>
    <link href="https://banatech.org/20220518/f9010c4d8c98.html"/>
    <id>https://banatech.org/20220518/f9010c4d8c98.html</id>
    <published>2022-05-18T15:01:43.000Z</published>
    <updated>2022-05-18T15:08:07.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>很多时候当我们需要实现一个web应用，第一时间想到的就是去使用哪个框架,然而不同的框架有不同的设计理念,提供的功能也有很大的差别  ,比如Java的<code>Spring</code> ,Python的<code>flask</code> 、<code>django</code> ,Go的 <code>Beego</code>、<code>Gin</code> 、<code>Iris</code> 等。那我们为什么不直接使用语言提供的标准库编写呢？要回答这个问题，首先明白框架的核心应该为我们提供什么？ 为什么要用框架？ 只有理解这些才能知道我们在框架中需要实现那些功能。为了深入理解Gin框架的代码和设计。本项目将会参考<strong>Gin</strong>框架实现Gin框架中部分的功能,学习一门技术最好的方式就是看懂后自己去实现一遍。<strong>Gin</strong>框架的代码一共约<strong>1万4千行</strong>，其中测试代码<strong>9千行</strong>，也就是说实际代码只有<strong>5千行</strong>, 小而美。非常值得初学者去学习。</p><p>代码仓库: <a href="https://github.com/xiaocan66/lee_go">https://github.com/xiaocan66/lee_go</a></p><h2 id="目前已实现的功能"><a href="#目前已实现的功能" class="headerlink" title="目前已实现的功能"></a>目前已实现的功能</h2><ul><li><p>动态路由</p></li><li><p>路由分组</p></li><li><p>添加中间件</p></li><li><p>HTML模板</p></li><li><p>数据映射 开发中…..</p></li></ul><h2 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h2><h3 id="开启一个HTTP服务"><a href="#开启一个HTTP服务" class="headerlink" title="开启一个HTTP服务"></a>开启一个HTTP服务</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;lee&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">      r := lee.Default()</span><br><span class="line">    r.Get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *lee.Context)</span></span> &#123;</span><br><span class="line">        fmt.Fprint(ctx.Writer, <span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run(<span class="string">&quot;:9000&quot;</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用中间件"><a href="#使用中间件" class="headerlink" title="使用中间件"></a>使用中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;lee&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// auth 定义中间件逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">auth</span><span class="params">()</span></span> lee.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx *lee.Context)</span></span> &#123;</span><br><span class="line">        username := ctx.Query(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;lee&quot;</span> &#123;</span><br><span class="line">            ctx.Next()</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.Abort()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">      r := lee.Default()</span><br><span class="line">    r.Use(auth()) <span class="comment">// 使用中间件</span></span><br><span class="line">    r.Get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *lee.Context)</span></span> &#123;</span><br><span class="line">        fmt.Fprint(ctx.Writer, <span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run(<span class="string">&quot;:9000&quot;</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">      r := lee.Default()</span><br><span class="line">    r.Use(auth()) <span class="comment">// 使用中间件</span></span><br><span class="line">    r.Get(<span class="string">&quot;/user/:username&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *lee.Context)</span></span> &#123;</span><br><span class="line">        fmt.Fprint(ctx.Writer, <span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Get(<span class="string">&quot;/assets/*filepath&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *lee.Context)</span></span> &#123;</span><br><span class="line">        fmt.Fprint(ctx.Writer, <span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run(<span class="string">&quot;:9000&quot;</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;lee&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// auth 定义中间件逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">auth</span><span class="params">()</span></span> lee.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx *lee.Context)</span></span> &#123;</span><br><span class="line">        username := ctx.Query(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;lee&quot;</span> &#123;</span><br><span class="line">            ctx.Next()</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.Abort()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">auth2</span><span class="params">()</span></span> lee.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx *lee.Context)</span></span> &#123;</span><br><span class="line">        username := ctx.Query(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;lee2&quot;</span> &#123;</span><br><span class="line">            ctx.Next()</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.Abort()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">      r := lee.Default()</span><br><span class="line">    r.Get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *lee.Context)</span></span> &#123;</span><br><span class="line">        fmt.Fprint(ctx.Writer, <span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    g1 := r.Group(<span class="string">&quot;v1&quot;</span>)</span><br><span class="line">    g1.Use(auth())</span><br><span class="line">    g1.Get(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *lee.Context)</span></span> &#123;</span><br><span class="line">        fmt.Fprint(ctx.Writer, <span class="string">&quot;g1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    g2 := r.Group(<span class="string">&quot;v2&quot;</span>)</span><br><span class="line">    g2.Use(auth2())</span><br><span class="line">    g2.Get(<span class="string">&quot;/post&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *lee.Context)</span></span> &#123;</span><br><span class="line">        fmt.Fprint(ctx.Writer, <span class="string">&quot;g2&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run(<span class="string">&quot;:9000&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;很多时候当我们需要实现一个web应用，第一时间想到的就是去使用哪个框架,然而不同的框架有不同的设计理念,提供的功能也有很大的差别  ,比如J</summary>
      
    
    
    
    
    <category term="Go" scheme="https://banatech.org/tags/Go/"/>
    
  </entry>
  
</feed>
