{"meta":{"title":"Li ' s Blog","subtitle":"写字的地方","description":"写写字","author":"李子灿","url":"https://banatech.org","root":"/"},"pages":[{"title":"","date":"2022-05-08T12:03:04.514Z","updated":"2022-05-08T12:03:04.501Z","comments":true,"path":"categories/index.html","permalink":"https://banatech.org/categories/index.html","excerpt":"","text":""},{"title":"","date":"2022-05-08T12:01:16.605Z","updated":"2022-05-08T12:01:16.593Z","comments":true,"path":"tags/index.html","permalink":"https://banatech.org/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用Golang从零开发一个Web框架","slug":"lee-framework","date":"2022-05-14T06:18:12.000Z","updated":"2022-05-14T12:45:29.279Z","comments":true,"path":"20220514/7ad2a5800a6e.html","link":"","permalink":"https://banatech.org/20220514/7ad2a5800a6e.html","excerpt":"","text":"序言很多时候当我们需要实现一个web应用，第一时间想到的就是去使用哪个框架,然而不同的框架有不同的设计理念,提供的功能也有很大的差别 ,比如Java的Spring ,Python的flask 、django ,Go的 Beego、Gin 、Iris 等。那我们为什么不直接使用语言提供的标准库编写呢？要回答这个问题，首先明白框架的核心应该为我们提供什么？ 为什么要用框架？ 只有理解这些才能知道我们在框架中需要实现那些功能。 下面我们看看使用Go语言标准库net/http 是如何去处理一个http请求的 12345678910111213package mainimport ( &quot;net/http&quot;)func main()&#123; http.HandleFunc(&quot;/&quot;,handler) log.Fatal(http.ListenAndServe(&quot;:8080&quot;,nil) &#125;func handler(w http.ResponseWriter , req *http.Request)&#123; fmt.Fprintf(w, &quot;URL:%s&quot;,req.URL.Path)&#125; Go语言的net/http 基础库提供了基础的Web功能，如端口监听，静态路由映射，解析HTTP报文 。如下的一些简单且常用的功能基础库并不支持，这些就需要开发人员自己去实现。 动态路由如/user/:username ,/assets/*filepath的这类规则 鉴权:没有统一的分组鉴权功能,需要在每个路由映射的handler 中实现。 模板:没有统一简单的HTML模板机制 ….. 当我们离开了框架,使用基础库在编写web应用时需要频繁的手工处理的地方，这就是框架的价值所在，但是也并不是每一个频繁处理的地方都适合在框架中完成。 lee框架本篇文章将会使用Go语言实现一个简单的Web框架，框架的代码设计参考Gin框架 。Gin框架的代码一共约1万4千行，其中测试代码9千行，也就是说实际代码只有5千行。Gin的设计也非常的优雅，代码量并不大，非常适合初学者学习。 实现路由功能未完待续……","categories":[],"tags":[{"name":"Go","slug":"Go","permalink":"https://banatech.org/tags/Go/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-05-08T14:53:58.073Z","updated":"2022-05-08T14:53:58.074Z","comments":true,"path":"20220508/048a3d05d53b.html","link":"","permalink":"https://banatech.org/20220508/048a3d05d53b.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"技术","slug":"技术","permalink":"https://banatech.org/categories/%E6%8A%80%E6%9C%AF/"},{"name":"Java","slug":"技术/Java","permalink":"https://banatech.org/categories/%E6%8A%80%E6%9C%AF/Java/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://banatech.org/tags/C/"},{"name":"java","slug":"java","permalink":"https://banatech.org/tags/java/"}]}],"categories":[{"name":"技术","slug":"技术","permalink":"https://banatech.org/categories/%E6%8A%80%E6%9C%AF/"},{"name":"Java","slug":"技术/Java","permalink":"https://banatech.org/categories/%E6%8A%80%E6%9C%AF/Java/"}],"tags":[{"name":"Go","slug":"Go","permalink":"https://banatech.org/tags/Go/"},{"name":"C++","slug":"C","permalink":"https://banatech.org/tags/C/"},{"name":"java","slug":"java","permalink":"https://banatech.org/tags/java/"}]}